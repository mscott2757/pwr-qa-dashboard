$(".app-body").after("<%= j render(partial: 'tests/edit', locals: { test: @test, types: @types, applications: @applications, environments: @environments } ) %>");

$(".delete-modal-backdrop").click(function() {
	this.remove();
})

$(".test-modal").click(function(e) {
	e.stopPropagation();
});

$("#close-test-modal").click(function() {
	$(".delete-modal-backdrop").remove();
});

<% if @test.parameterized %>
	$("#test_environment_tag").prop('disabled', 'disabled')
		.prop('title', 'This test is parameterized')
		.tooltip(25);
<% end %>

$( function() {
    var availableTags = [];

		<% @applications.each do |app_tag| %>
			availableTags.push('<%= j app_tag.first %>');
		<% end %>

    function split( val ) {
      return val.split( /,\s*/ );
    }
    function extractLast( term ) {
      return split( term ).pop();
    }

    $( "#indirect-autocomplete" )
      // don't navigate away from the field on tab when selecting an item
      .on( "keydown", function( event ) {
        if ( event.keyCode === $.ui.keyCode.TAB &&
            $( this ).autocomplete( "instance" ).menu.active ) {
          event.preventDefault();
        }
      })
      .autocomplete({
        minLength: 0,
        source: function( request, response ) {
          // delegate back to autocomplete, but extract the last term
          response( $.ui.autocomplete.filter(
            availableTags, extractLast( request.term ) ) );
        },
        focus: function() {
          // prevent value inserted on focus
          return false;
        },
        select: function( event, ui ) {
          var terms = split( this.value );
          // remove the current input
          terms.pop();
          // add the selected item
          terms.push( ui.item.value );
          // add placeholder to get the comma-and-space at the end
          terms.push( "" );
          this.value = terms.join( ", " );
          return false;
        }
      });
  } );
